const { exec } = require("child_process");
const reportResult = require("../reporting/api");
const Axios = require(`axios`);

async function cmd(script)
{
    return new Promise((resolve, reject) => exec(script, (e, out, err) =>
    {
        if (e) { reject(e); }
        else if(err) { reject(err); }
        else { resolve(out); }
    }));
}

/** Test block generated by Gadwick */
describe(`NPM Module`, function() {
	it(`Can update based on config`, async function() {
        // await cmd(`mkdir temp`)
        const output = await cmd(`node gadwick.js update`)
        // TODO: Test the output makes sense
        // TODO: Check the files exist
        // console.log(output)
        await cmd(`rm temp/*.spec.js`)
        // await cmd(`rmdir temp`)
	})
})
describe(`Reporting`, function() {
	it(`Results register with Gadwick`, async function() {
        const result = await reportResult({ idMap: { names: { "Reporting": "1234" }} }, "Reporting", true, "0.1.0", "");
        // console.dir(result);
        expect(result.id).not.toBeUndefined();
        const failResult = await reportResult({ idMap: { names: { "Reporting": "1234" }} }, "Reporting", false, "0.1.0", "Testing failures");
        // console.dir(result);
        expect(failResult.id).not.toBeUndefined();
        // const response = await Axios.get(`http://localhost:3003/results/${result.id}`);
        // expect(response.data.id).toBe(result.id);
        // expect(response.data.feature_id).toBe("1234");
        // expect(response.data.automated).toBe("TRUE");
        // const response = await Axios.delete(`http://localhost:3003/results/${result.id}`);
	})
})