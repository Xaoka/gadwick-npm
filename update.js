const Axios = require(`axios`);
const fs = require('fs');
const path = require('path')
let config;

const gadwickEndpoint = "https://3i07lk1jl8.execute-api.us-east-1.amazonaws.com";

function toFileName(featureName)
{
    return featureName.replace(/[^a-zA-Z\d:]/g, "_");
}

function toFeatureName(fileName)
{
    return fileName.replace(/_/g, " ");
}

async function updateStubs()
{
    try
    {
        fs.existsSync(path)
        config = JSON.parse(fs.readFileSync('gadwick-config.json', 'utf8'));
    }
    catch (e)
    {
        console.log(`Gadwick has not been configured, run 'gadwick configure' first.`);
        return;
    }
    console.log(`Finding features from Gadwick...`)
    if (!config.client_secret)
    {
        console.log(`No client secret found for app. Run 'gadwick config'.`);
        return;
    }
    const testSuiteDirectoryPath = config.test_directory;
    const response = await Axios.get(`${gadwickEndpoint}/features/s/${config.client_secret}`)
    let features = response.data;
    if (features.length === undefined || features.length === null)
    {
        console.log(`Failed to get features from Gadwick.`);
        return;
    }
    // Only generate tests for high-priority features
    features = features.filter((f) => f.priority > 50);
    // console.dir(response.data.data);
    // console.log(`Found ${features.length} features:\n${features.map((feature) => feature.feature_name).join("\n")}`)
    // TODO: Resolve file name conflicts between local & gadwick
    fs.readdir(testSuiteDirectoryPath, function (err, files) {
        //handling error
        if (err) {
            return console.log('Unable to scan directory: ' + err);
        } 
        //listing all files using forEach
        /** All existing file names (Underscore format) */
        const testFiles = []
        files.forEach(function (file) {
            if (fs.statSync(path.join(testSuiteDirectoryPath, file)).isFile()) {
                if (file.endsWith('.spec.js')) {
                    // Do whatever you want to do with the file
                    // console.log(file); 
                    testFiles.push(file.replace('.spec.js', ''));
                }
            }
        });
        console.log(`testFiles "${testFiles.join()}`)
        let idMap = [];
        for (const gadwickFeature of features)
        {
            if (testFiles.includes(toFileName(gadwickFeature.name)))
            {
                console.log(`[OLD]\t${gadwickFeature.name}`);
            }
            else
            {
                console.log(`[NEW]\t${gadwickFeature.name}`);
                let steps = ["\t\t// Write your test behaviour here."];
                if (gadwickFeature.steps)
                {
                    steps = JSON.parse(gadwickFeature.steps).map((step) => `\t\t// ${step}`)
                }
                const fileData =
                [
                    `/** Test block generated by Gadwick */`,
                    `describe(\`${gadwickFeature.name}\`, function() {`,
                    `\tit(\`${gadwickFeature.description}\`, function() {`,
                    ...steps,
                    `\t})`,
                    `})`
                ]
                const fileName = toFileName(gadwickFeature.name);
                if (!testFiles.includes(fileName))
                {
                    const outputFilePath = path.join(testSuiteDirectoryPath, `${fileName}.spec.js`);
                    fs.writeFileSync(outputFilePath, fileData.join("\n"));
                    console.log(`\x1b[32m%s\x1b[0m`, `New stub test file created for ${gadwickFeature.name}`);
                }
            }
            console.log(`Added "${gadwickFeature.name}" to map`)
            idMap.push({ id: gadwickFeature.id, name: gadwickFeature.name });
        }
        const gadwickNames = features.map((f) => toFileName(f.name));
        for (const localFeature of testFiles)
        {
            if (!gadwickNames.includes(localFeature))
            {
                console.log(`[LOCAL]\t${toFeatureName(localFeature)}`);
                // TODO: Push feature to gadwick here
            }
        }
        // console.dir(idMap)
        const map = config.idMap || { ids: {}, names: {}};
        for (const id of idMap)
        {
            map.ids[id.id] = id.name;
            map.names[id.name] = id.id;
        }
        const newConfig = JSON.stringify({ ...config, idMap: map }, null, 2);
        fs.writeFileSync(`gadwick-config.json`, newConfig);
        // console.log(`Updated config with mapping:`);
        // console.log(newConfig);
    });
}

module.exports = { updateStubs }