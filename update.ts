const Axios = require(`axios`);
const fs = require('fs');
const path = require('path')

const testSuiteDirectoryPath = '../cypress/integration';

async function updateStubs()
{
    console.log(`Finding features from Gadwick...`)
    const response = await Axios.get(`http://localhost:3003/features`)
    const features = response.data;
    // console.dir(response.data.data);
    // console.log(`Found ${features.length} features:\n${features.map((feature) => feature.feature_name).join("\n")}`)
    fs.readdir(testSuiteDirectoryPath, function (err, files) {
        //handling error
        if (err) {
            return console.log('Unable to scan directory: ' + err);
        } 
        //listing all files using forEach
        const testFiles = []
        files.forEach(function (file) {
            if (fs.statSync(path.join(testSuiteDirectoryPath, file)).isFile()) {
                if (file.endsWith('.spec.js')) {
                    // Do whatever you want to do with the file
                    // console.log(file); 
                    testFiles.push(file.replace('.spec.js', ''));
                }
            }
        });
        let idMap = [];
        for (const gadwickFeature of features)
        {
            if (testFiles.includes(gadwickFeature.name))
            {
                console.log(`[OLD]\t${gadwickFeature.name}`);
            }
            else
            {
                console.log(`[NEW]\t${gadwickFeature.name}`);
                const fileData =
                [
                    `/** Test block generated by Gadwick */`,
                    `describe('${gadwickFeature.name}', function() {`,
                    `\tit('${gadwickFeature.description}', function() {`,
                    `\t\t// Test steps here. See the gadwick site for examples.`,
                    `\t})`,
                    `})`
                ]
                idMap.push({ id: gadwickFeature.id, name: gadwickFeature.name });
                fs.writeFile(path.join(testSuiteDirectoryPath, `${gadwickFeature.name.replace(" ", "")}.spec.js`), fileData.join("\n"), (err) => {
                    if (err) throw err;
                    console.log(`New stub test file created for ${gadwickFeature.name}`);
                });
            }
        }
        const mapFile = `{\n\t"ids": {${idMap.map((id) => `\n\t\t"${id.id}": "${id.name}"`)}\n\t},\n\t"names": {${idMap.map((id) => `\n\t\t"${id.name}": "${id.id}"`)}\n\t}\n}`
        fs.writeFile(`mapFile.json`, mapFile, (err) => {
            if (err) throw err;
            console.log(`New mapfile created:`);
            console.log(mapFile);
        });
        const gadwickNames = features.map((f) => f.feature_name);
        for (const localFeature of testFiles)
        {
            if (!gadwickNames.includes(localFeature))
            {
                console.log(`[LOCAL]\t${localFeature}`);
            }
        }
    });
}

updateStubs();